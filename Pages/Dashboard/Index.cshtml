@page
@model FoodManagement.Pages.Dashboard.IndexModel
@{
    ViewData["Title"] = "Trang chủ";
}

<div class="container py-3">
    <div class="row gy-3">

        <!-- Left column: revenue + top foods summary -->
        <div class="col-12 col-lg-4 d-flex flex-column gap-3">
            <!-- Today revenue -->
            <div class="card shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <h6 class="mb-1 text-muted">Doanh thu hôm nay</h6>
                            <h2 id="todayRevenueDisplay" class="mb-0">0 ₫</h2>
                            <small class="text-muted">Cập nhật theo thời gian thực</small>
                        </div>
                        <div class="text-end">
                            <i class="bi bi-currency-dollar fs-2 text-primary"></i>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Top foods summary (compact) -->
            <div class="card shadow-sm">
                <div class="card-header d-flex align-items-center justify-content-between">
                    <strong>Top món ăn</strong>
                    <small class="text-muted">Top 5</small>
                </div>
                <div class="card-body">
                    <div id="topFoodsSmallList" class="list-group list-group-flush"></div>
                </div>
            </div>
        </div>

        <!-- Right column: top foods chart and top users -->
        <div class="col-12 col-lg-8 d-flex flex-column gap-2">
            <div class="row g-3">
                <div class="col-12 col-xl-7">
                    <div class="card h-100 shadow-sm">
                        <div class="card-header d-flex align-items-center justify-content-between">
                            <strong id="topFoodsTitle">Top món ăn (Hôm nay)</strong>
                            <div>
                                <button id="btnFoodsDay" class="btn btn-sm btn-primary me-1">Hôm nay</button>
                                <button id="btnFoodsMonth" class="btn btn-sm btn-outline-secondary">Tháng</button>
                            </div>
                        </div>
                        <div class="card-body p-2">
                            <canvas id="topFoodsChart" height="240"></canvas>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-xl-5">
                    <div class="card h-100 shadow-sm">
                        <div class="card-header d-flex align-items-center justify-content-between">
                            <strong>Top người dùng</strong>
                            <div>
                                <button id="btnUsersDay" class="btn btn-sm btn-primary me-1">Hôm nay</button>
                                <button id="btnUsersMonth" class="btn btn-sm btn-outline-secondary">Tháng</button>
                            </div>
                        </div>
                        <div class="card-body p-2">
                            <div id="topUsersList" class="d-flex flex-column gap-1"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

    <script>
        // initial payloads from server
        const initialRevenue = @Html.Raw(Model.TodayRevenueJson ?? "0");
        const initialTopFoodsDay = @Html.Raw(Model.TopFoodsTodayJson ?? "[]");
        const initialTopFoodsMonth = @Html.Raw(Model.TopFoodsMonthJson ?? "[]");
        const initialTopUsersDay = @Html.Raw(Model.TopUsersDayJson ?? "[]");
        const initialTopUsersMonth = @Html.Raw(Model.TopUsersMonthJson ?? "[]");

        // helpers
        function formatCurrency(v) {
            try { return Number(v).toLocaleString('vi-VN') + ' VNĐ'; }
            catch (e) { return v + ' VNĐ'; }
        }
        function escapeHtml(s) {
            if (!s && s !== 0) return '';
            return String(s).replaceAll('&','&amp;').replaceAll('<','&lt;')
                     .replaceAll('>','&gt;').replaceAll('"','&quot;').replaceAll("'",'&#39;');
        }

        // initial render: revenue
        const revenueEl = document.getElementById('todayRevenueDisplay');
        if (revenueEl) revenueEl.textContent = formatCurrency(initialRevenue ?? 0);

        // --- Top foods small list ---
        function renderTopFoodsSmall(arr) {
            const container = document.getElementById('topFoodsSmallList');
            if (!container) return;
            container.innerHTML = '';
            (arr || []).slice(0,5).forEach((f, idx) => {
                const totalQty = (f.totalQuantity ?? f.quantity ?? 0);
                const totalRev = (f.totalRevenue ?? 0);
                const item = document.createElement('div');
                item.className = 'list-group-item d-flex justify-content-between align-items-center';
                item.innerHTML = `<div>
                                    <div class="fw-semibold">${idx+1}. ${escapeHtml(f.name)}</div>
                                    <div class="small text-muted">${totalQty} món • ${formatCurrency(totalRev)}</div>
                                  </div>
                                  <div><span class="badge bg-primary">#${idx+1}</span></div>`;
                container.appendChild(item);
            });
        }

        // --- Top foods chart ---
        const foodsCtx = document.getElementById('topFoodsChart')?.getContext?.('2d');
        let foodsChart = null;
        function renderTopFoodsChart(arr) {
            if (!foodsCtx) return;
            const labels = (arr || []).map(x => x.name);
            const qtys = (arr || []).map(x => Number(x.totalQuantity ?? x.quantity ?? 0));
            if (foodsChart) {
                foodsChart.data.labels = labels;
                foodsChart.data.datasets[0].data = qtys;
                foodsChart.update();
            } else {
                foodsChart = new Chart(foodsCtx, {
                    type: 'bar',
                    data: {
                        labels,
                        datasets: [{
                            label: 'Số lượng',
                            data: qtys,
                            backgroundColor: labels.map((_,i)=>`hsl(${(i*47)%360} 70% 50%)`)
                        }]
                    },
                    options: {
                        indexAxis: 'y',
                        responsive: true,
                        plugins: { legend: { display:false } },
                        scales: { x: { ticks: { callback: v => Number(v).toLocaleString('vi-VN') } } }
                    }
                });
            }
            renderTopFoodsSmall(arr);
        }

        // --- Top users list (text) ---
        function renderTopUsers(arr) {
            const container = document.getElementById('topUsersList');
            if (!container) return;
            container.innerHTML = '';
            (arr || []).slice(0,10).forEach((u, idx) => {
                const row = document.createElement('div');
                row.className = 'd-flex justify-content-between';
                row.innerHTML = `
                    <span>${idx + 1}. ${escapeHtml(u.displayName ?? u.email ?? u.id ?? 'User')}</span>
                    <span class="text-muted">${formatCurrency(u.totalSpent ?? u.total ?? 0)}</span>
                `;
                container.appendChild(row);
            });
        }

        // render initial server payloads (day default for both)
        renderTopFoodsChart(initialTopFoodsDay);
        renderTopUsers(initialTopUsersDay);

        // --- UI: independent toggles ---
        let foodsMode = 'day'; // 'day' or 'month'
        let usersMode = 'day';

        document.getElementById('btnFoodsDay')?.addEventListener('click', function () {
            foodsMode = 'day';
            renderTopFoodsChart(initialTopFoodsDay);
            document.getElementById('topFoodsTitle').textContent = 'Top món ăn (Hôm nay)';
            this.classList.remove('btn-outline-primary'); this.classList.add('btn-primary');
            const other = document.getElementById('btnFoodsMonth');
            if (other) { other.classList.remove('btn-primary'); other.classList.add('btn-outline-secondary'); }
        });
        document.getElementById('btnFoodsMonth')?.addEventListener('click', function () {
            foodsMode = 'month';
            renderTopFoodsChart(initialTopFoodsMonth);
            document.getElementById('topFoodsTitle').textContent = 'Top món ăn (Tháng)';
            this.classList.remove('btn-outline-secondary'); this.classList.add('btn-primary');
            const other = document.getElementById('btnFoodsDay');
            if (other) { other.classList.remove('btn-primary'); other.classList.add('btn-outline-primary'); }
        });

        document.getElementById('btnUsersDay')?.addEventListener('click', function () {
            usersMode = 'day';
            renderTopUsers(initialTopUsersDay);
            this.classList.remove('btn-outline-primary'); this.classList.add('btn-primary');
            const other = document.getElementById('btnUsersMonth');
            if (other) { other.classList.remove('btn-primary'); other.classList.add('btn-outline-secondary'); }
        });
        document.getElementById('btnUsersMonth')?.addEventListener('click', function () {
            usersMode = 'month';
            renderTopUsers(initialTopUsersMonth);
            this.classList.remove('btn-outline-secondary'); this.classList.add('btn-primary');
            const other = document.getElementById('btnUsersDay');
            if (other) { other.classList.remove('btn-primary'); other.classList.add('btn-outline-primary'); }
        });

        // ---------------------------
        // SignalR realtime updates
        // ---------------------------
        const hub = new signalR.HubConnectionBuilder().withUrl('/hubs/bookings').withAutomaticReconnect().build();

        hub.on('BookingsUpdated', function(items) {
            try {
                const agg = computeDashboardFromBookings(items || []);
                // update today revenue
                if (revenueEl) revenueEl.textContent = formatCurrency(agg.todayRevenue);

                // update foods: choose according to foodsMode
                if (foodsMode === 'day') renderTopFoodsChart(agg.topFoodsDay);
                else renderTopFoodsChart(agg.topFoodsMonth);

                // update users: choose according to usersMode
                if (usersMode === 'day') renderTopUsers(agg.topUsersDay);
                else renderTopUsers(agg.topUsersMonth);
            } catch(err) {
                console.error('BookingsUpdated processing error', err);
            }
        });

        hub.start().catch(err => console.warn('signalr start err', err));

        // -------- compute function (returns day/month variants) ----------
        function parseBookingItemsText(text) {
            if (!text) return [];
            const lines = text.split(/\r?\n/).map(l => l.trim()).filter(Boolean);
            const out = [];
            const regex = /^(?:-)?\s*(.+?)\s*\(\s*([\d\.,]+)\s*VNĐ\s*\)\s*(?:[-–—]\s*)?(?:Số lượng\s*:?\s*(\d+))?/i;
            for (const ln of lines) {
                const m = ln.match(regex);
                if (m) {
                    const name = m[1].trim();
                    let priceRaw = m[2].replace(/\./g,'').replace(/,/g,'.');
                    const price = Number(priceRaw) || Number(m[2].replace(/\./g,'')) || 0;
                    const qty = m[3] ? Number(m[3]) : 1;
                    out.push({ name, price, qty });
                } else {
                    out.push({ name: ln, price: 0, qty: 1 });
                }
            }
            return out;
        }

        function computeDashboardFromBookings(bookings) {
            const todayKey = new Date().toISOString().slice(0,10);
            let todayRevenue = 0;
            const foodMapDay = new Map();
            const foodMapMonth = new Map();
            const userMapDay = new Map();
            const userMapMonth = new Map();

            for (const b of bookings) {
                // createdAt heuristics
                let created = null;
                if (b.createdAt) {
                    const n = Number(b.createdAt);
                    if (!Number.isNaN(n)) {
                        if (n > 1e12) created = new Date(n);
                        else if (n > 1e10) created = new Date(n);
                        else created = new Date(n * 1000);
                    }
                }
                if (!created && b.createdText) created = new Date(b.createdText);
                if (!created && b.timestamp) created = new Date(Number(b.timestamp));
                if (!created) created = new Date();

                const dayKey = created.toISOString().slice(0,10);
                const monthKey = created.getUTCFullYear() + '-' + String(created.getUTCMonth()+1).padStart(2,'0');

                // booking total (try common fields)
                const bookingTotal = Number(b.total ?? b.totalPrice ?? b.amount ?? 0) || 0;

                if (dayKey === todayKey) todayRevenue += bookingTotal;

                // aggregate users (day/month) with displayName if available
                const uid = b.accountId ?? b.userId ?? (b.user?.id ?? 'unknown');
                const uname = (b.user?.fullName ?? b.user?.displayName ?? b.name ?? b.email ?? uid);
                // day
                const ud = userMapDay.get(uid) ?? { id: uid, displayName: uname, totalSpent: 0 };
                ud.totalSpent += (dayKey === todayKey) ? bookingTotal : 0; // dayMap counts only today's totals
                // but we also want all-day totals for day-range—here we assume "day" means today in this dashboard
                userMapDay.set(uid, ud);
                // month (aggregate if same year-month)
                const um = userMapMonth.get(uid) ?? { id: uid, displayName: uname, totalSpent: 0 };
                um.totalSpent += bookingTotal; // we will filter month by created month in sort below if needed; for simplicity we include all bookings in same year
                userMapMonth.set(uid, um);

                // parse items
                let items = [];
                if (Array.isArray(b.items)) items = b.items;
                else if (typeof b.items === 'string') items = parseBookingItemsText(b.items);
                else if (Array.isArray(b.orderItems)) items = b.orderItems;
                else if (typeof b.foods === 'string') items = parseBookingItemsText(b.foods);

                for (const it of items) {
                    const name = (it.name ?? it.title ?? it.foodName ?? '').trim() || 'Unknown';
                    const qty = Number(it.qty ?? it.quantity ?? it.count ?? 1) || 1;
                    const price = Number(it.price ?? it.unitPrice ?? it.amount ?? 0) || 0;

                    if (dayKey === todayKey) {
                        const prev = foodMapDay.get(name) ?? { name, totalRevenue:0, totalQuantity:0 };
                        prev.totalQuantity += qty;
                        prev.totalRevenue += price * qty;
                        foodMapDay.set(name, prev);
                    }

                    const prevM = foodMapMonth.get(name) ?? { name, totalRevenue:0, totalQuantity:0 };
                    prevM.totalQuantity += qty;
                    prevM.totalRevenue += price * qty;
                    foodMapMonth.set(name, prevM);
                }
            }

            const topFoodsDay = Array.from(foodMapDay.values()).sort((a,b)=> (b.totalQuantity||0)-(a.totalQuantity||0)).slice(0,10);
            const topFoodsMonth = Array.from(foodMapMonth.values()).sort((a,b)=> (b.totalRevenue||0)-(a.totalRevenue||0)).slice(0,10);

            // top users day: sort by totalSpent (note: we only incremented today entries above)
            const topUsersDay = Array.from(userMapDay.values()).sort((a,b)=> (b.totalSpent||0)-(a.totalSpent||0)).slice(0,10);
            const topUsersMonth = Array.from(userMapMonth.values()).sort((a,b)=> (b.totalSpent||0)-(a.totalSpent||0)).slice(0,10);

            return {
                todayRevenue,
                topFoodsDay,
                topFoodsMonth,
                topUsersDay,
                topUsersMonth
            };
        }
    </script>
}